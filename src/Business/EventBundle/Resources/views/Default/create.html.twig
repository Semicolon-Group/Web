{% extends 'business_base.html.twig' %}
{% block title %}Event | Create{% endblock %}
{% block page_title %}Event creation form{% endblock %}
{% block page_path %}
    <li class="breadcrumb-item">Event</li>
    <li class="breadcrumb-item active">Create</li>
{% endblock %}


{% block body %}


        <h1>Ajouter Event</h1>
        {{ form_start(form) }}

    <div class="col-lg-12 col-md-6 col-sm-6 col-xs-12">
        <div class="form-group">
            <label  style="color: #0a0a0a" class="control-label" for="first-name">Name event </label><br>
            {{ form_widget(form.title, {'attr':{'class':'form-control'}}) }}
        </div>
    </div>

    <div class="col-lg-12 col-md-6 col-sm-6 col-xs-12">
        <div class="form-group">
            <label  style="color: #0a0a0a" class="control-label" for="first-name">Description </label><br>
            {{ form_widget(form.content, {'attr':{'class':'form-control'}}) }}
        </div>
    </div>

    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="form-group">
            <label style="color: #0a0a0a" class="control-label" for="company-name">image {{ form_widget(form.photoUrl) }}  </label></br>
        </div>
    </div>

    <div class="col-lg-12 col-md-6 col-sm-6 col-xs-12">
        <div class="form-group">
            <label  style="color: #0a0a0a" class="control-label" for="first-name">max places </label><br>
            {{ form_widget(form.maxPlaces, {'attr':{'class':'form-control'}}) }}
        </div>
    </div>


    <div class="col-lg-12 col-md-6 col-sm-6 col-xs-12">
        <div class="form-group">
            <label  style="color: #0a0a0a" class="control-label" for="first-name">Start Date </label><br>
            {{ form_widget(form.startDate) }}
        </div>
    </div>


    <div class="col-lg-12 col-md-6 col-sm-6 col-xs-12">
        <div class="form-group">
            <label  style="color: #0a0a0a" class="control-label" for="first-name">End Date </label><br>
            {{ form_widget(form.endDate) }}
        </div>
    </div>
    <div id="map"></div>
        {{ form_end(form) }}

{% endblock %}

{% block stylesheets %}
<style>

        #map {
            width: 100%;
            height: 400px;
            }
</style>
{% endblock %}
{% block scripts %}
    <script>
        var lng=0;
        var lat=0;
        var add="";

        function initMap() {

            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: -33.8688, lng: 151.2195},
                zoom: 13
            });
            var input = /** @type {!HTMLInputElement} */(
                document.getElementById('pac-input'));

            var types = document.getElementById('type-selector');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                draggable: true,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    /************  extracting data ************/
                    console.log(place);
                    add= place.adr_address;
                    lat=place.geometry.location.lat();
                    lng=place.geometry.location.lng();
                    /************ end extracting data *********/
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setIcon(/** @type {google.maps.Icon} */({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function() {
                    autocomplete.setTypes(types);
                });
            }

            /********* dragbal marker setup *********************/
            google.maps.event.addListener(marker, 'dragend', function()
            {
                geocodePosition(marker.getPosition());
            });

            function geocodePosition(pos)
            {
                geocoder = new google.maps.Geocoder();
                geocoder.geocode
                ({
                        latLng: pos
                    },
                    function(results, status)
                    {
                        if (status == google.maps.GeocoderStatus.OK)
                        {
                            add=results[0].formatted_address;
                            lat=results[0].geometry.location.lat();
                            lng=results[0].geometry.location.lng();
                        }
                        else
                        {
                            console.log('Cannot determine address at this location.'+status).show(100);
                        }
                    }
                );
            }
            /********* End dragbal marker setup *********************/

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);
        }

        function sendData(){
            $("#basebundle_address_longitude").val(add);
            $("#basebundle_address_longitude").val(lng);
            $("#basebundle_address_latitude").val(lat);
            document.getElementById("Evenement_add_form").submit();
        };
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCh0d4cmZLraDuRksX85uT4u3FJyXXUxfY&callback&libraries=places&callback=initMap"
            async defer></script>
{% endblock %}

